// Code generated by MockGen. DO NOT EDIT.
// Source: topic_reader_stream_internal_interface.go

package topic

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MocktopicStreamReader is a mock of topicStreamReader interface.
type MocktopicStreamReader struct {
	ctrl     *gomock.Controller
	recorder *MocktopicStreamReaderMockRecorder
}

// MocktopicStreamReaderMockRecorder is the mock recorder for MocktopicStreamReader.
type MocktopicStreamReaderMockRecorder struct {
	mock *MocktopicStreamReader
}

// NewMocktopicStreamReader creates a new mock instance.
func NewMocktopicStreamReader(ctrl *gomock.Controller) *MocktopicStreamReader {
	mock := &MocktopicStreamReader{ctrl: ctrl}
	mock.recorder = &MocktopicStreamReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktopicStreamReader) EXPECT() *MocktopicStreamReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MocktopicStreamReader) Close(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx, err)
}

// Close indicates an expected call of Close.
func (mr *MocktopicStreamReaderMockRecorder) Close(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MocktopicStreamReader)(nil).Close), ctx, err)
}

// Commit mocks base method.
func (m *MocktopicStreamReader) Commit(ctx context.Context, offset CommitBatch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MocktopicStreamReaderMockRecorder) Commit(ctx, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MocktopicStreamReader)(nil).Commit), ctx, offset)
}

// ReadMessageBatch mocks base method.
func (m *MocktopicStreamReader) ReadMessageBatch(ctx context.Context, opts ReadMessageBatchOptions) (*Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessageBatch", ctx, opts)
	ret0, _ := ret[0].(*Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessageBatch indicates an expected call of ReadMessageBatch.
func (mr *MocktopicStreamReaderMockRecorder) ReadMessageBatch(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessageBatch", reflect.TypeOf((*MocktopicStreamReader)(nil).ReadMessageBatch), ctx, opts)
}
