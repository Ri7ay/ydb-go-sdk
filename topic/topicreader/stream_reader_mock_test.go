// Code generated by MockGen. DO NOT EDIT.
// Source: stream_reader_interface.go

package topicreader

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockstreamReader is a mock of streamReader interface.
type MockstreamReader struct {
	ctrl     *gomock.Controller
	recorder *MockstreamReaderMockRecorder
}

// MockstreamReaderMockRecorder is the mock recorder for MockstreamReader.
type MockstreamReaderMockRecorder struct {
	mock *MockstreamReader
}

// NewMockstreamReader creates a new mock instance.
func NewMockstreamReader(ctrl *gomock.Controller) *MockstreamReader {
	mock := &MockstreamReader{ctrl: ctrl}
	mock.recorder = &MockstreamReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstreamReader) EXPECT() *MockstreamReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockstreamReader) Close(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx, err)
}

// Close indicates an expected call of Close.
func (mr *MockstreamReaderMockRecorder) Close(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockstreamReader)(nil).Close), ctx, err)
}

// Commit mocks base method.
func (m *MockstreamReader) Commit(ctx context.Context, offset CommitBatch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockstreamReaderMockRecorder) Commit(ctx, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockstreamReader)(nil).Commit), ctx, offset)
}

// ReadMessageBatch mocks base method.
func (m *MockstreamReader) ReadMessageBatch(ctx context.Context, opts readMessageBatchOptions) (Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessageBatch", ctx, opts)
	ret0, _ := ret[0].(Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessageBatch indicates an expected call of ReadMessageBatch.
func (mr *MockstreamReaderMockRecorder) ReadMessageBatch(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessageBatch", reflect.TypeOf((*MockstreamReader)(nil).ReadMessageBatch), ctx, opts)
}
