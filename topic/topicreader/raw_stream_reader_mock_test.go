// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ydb-platform/ydb-go-sdk/v3/topic/topicreader (interfaces: RawStreamReader)

package topicreader

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rawtopicreader "github.com/ydb-platform/ydb-go-sdk/v3/internal/grpcwrapper/rawtopicreader"
)

// MockRawStreamReader is a mock of RawStreamReader interface.
type MockRawStreamReader struct {
	ctrl     *gomock.Controller
	recorder *MockRawStreamReaderMockRecorder
}

// MockRawStreamReaderMockRecorder is the mock recorder for MockRawStreamReader.
type MockRawStreamReaderMockRecorder struct {
	mock *MockRawStreamReader
}

// NewMockRawStreamReader creates a new mock instance.
func NewMockRawStreamReader(ctrl *gomock.Controller) *MockRawStreamReader {
	mock := &MockRawStreamReader{ctrl: ctrl}
	mock.recorder = &MockRawStreamReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawStreamReader) EXPECT() *MockRawStreamReaderMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockRawStreamReader) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockRawStreamReaderMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRawStreamReader)(nil).CloseSend))
}

// Recv mocks base method.
func (m *MockRawStreamReader) Recv() (rawtopicreader.ServerMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(rawtopicreader.ServerMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRawStreamReaderMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRawStreamReader)(nil).Recv))
}

// Send mocks base method.
func (m *MockRawStreamReader) Send(arg0 rawtopicreader.ClientMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRawStreamReaderMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRawStreamReader)(nil).Send), arg0)
}
